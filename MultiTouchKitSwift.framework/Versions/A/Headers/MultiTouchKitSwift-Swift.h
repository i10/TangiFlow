// Generated by Apple Swift version 4.2.1 effective-3.4.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import AppKit;
@import CoreBluetooth;
@import CoreGraphics;
@import Foundation;
@import MultipeerConnectivity;
@import ObjectiveC;
@import SpriteKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MultiTouchKitSwift",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC18MultiTouchKitSwift16GazeTableManager")
@interface GazeTableManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GazeTableManager * _Nonnull shared;)
+ (GazeTableManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MCNearbyServiceBrowser;
@class MCPeerID;

@interface GazeTableManager (SWIFT_EXTENSION(MultiTouchKitSwift)) <MCNearbyServiceBrowserDelegate>
- (void)browser:(MCNearbyServiceBrowser * _Nonnull)browser foundPeer:(MCPeerID * _Nonnull)peerID withDiscoveryInfo:(NSDictionary<NSString *, NSString *> * _Nullable)info;
- (void)browser:(MCNearbyServiceBrowser * _Nonnull)browser lostPeer:(MCPeerID * _Nonnull)peerID;
@end

@class MCSession;
@class NSInputStream;
@class NSProgress;

@interface GazeTableManager (SWIFT_EXTENSION(MultiTouchKitSwift)) <MCSessionDelegate>
- (void)session:(MCSession * _Nonnull)session peer:(MCPeerID * _Nonnull)peerID didChangeState:(MCSessionState)state;
- (void)session:(MCSession * _Nonnull)session didReceiveData:(NSData * _Nonnull)data fromPeer:(MCPeerID * _Nonnull)peerID;
- (void)session:(MCSession * _Nonnull)session didReceiveStream:(NSInputStream * _Nonnull)stream withName:(NSString * _Nonnull)streamName fromPeer:(MCPeerID * _Nonnull)peerID;
- (void)session:(MCSession * _Nonnull)session didStartReceivingResourceWithName:(NSString * _Nonnull)resourceName fromPeer:(MCPeerID * _Nonnull)peerID withProgress:(NSProgress * _Nonnull)progress;
- (void)session:(MCSession * _Nonnull)session didFinishReceivingResourceWithName:(NSString * _Nonnull)resourceName fromPeer:(MCPeerID * _Nonnull)peerID atURL:(NSURL * _Nullable)localURL withError:(NSError * _Nullable)error;
- (void)session:(MCSession * _Nonnull)session didReceiveCertificate:(NSArray * _Nullable)certificate fromPeer:(MCPeerID * _Nonnull)peerID certificateHandler:(void (^ _Nonnull)(BOOL))certificateHandler;
@end


/// Protocol to implement of instance that wants to be the delegate for any Bluetooth peripheral.
SWIFT_PROTOCOL("_TtP18MultiTouchKitSwift25MTKBluetoothNotifications_")
@protocol MTKBluetoothNotifications
@property (nonatomic, readonly, copy) NSString * _Nonnull observerName;
@optional
- (void)discoveredWithPeripheralName:(NSString * _Nonnull)peripheralName peripheralID:(NSUUID * _Nonnull)peripheralID;
- (void)connectedToPeripheralName:(NSString * _Nonnull)peripheralName peripheralID:(NSUUID * _Nonnull)peripheralID;
- (void)disconnectedFromPeripheralName:(NSString * _Nonnull)peripheralName peripheralID:(NSUUID * _Nonnull)peripheralID;
- (void)surfaceSensorUpdateWithPeripheralName:(NSString * _Nonnull)peripheralName peripheralID:(NSUUID * _Nonnull)peripheralID value:(BOOL)value;
- (void)lightSensorUpdateWithPeripheralName:(NSString * _Nonnull)peripheralName peripheralID:(NSUUID * _Nonnull)peripheralID value:(BOOL)value;
- (void)rotationSensorUpdateWithPeripheralName:(NSString * _Nonnull)peripheralName peripheralID:(NSUUID * _Nonnull)peripheralID xValue:(double)xValue yValue:(double)yValue zValue:(double)zValue;
@end

@class MTKTrace;
@class NSNumber;
@class SKShapeNode;
@class MTKPassiveTangibleModel;
@class NSCoder;

SWIFT_CLASS("_TtC18MultiTouchKitSwift18MTKPassiveTangible")
@interface MTKPassiveTangible : SKNode
/// Identifier of tangible.
@property (nonatomic, copy) NSString * _Null_unspecified identifier;
/// Name of the tangible.
@property (nonatomic, copy) NSString * _Nullable tName;
/// Alpha angle of the tangible.
@property (nonatomic) CGFloat alphaAngle;
/// Beta angle of the tangible.
@property (nonatomic) CGFloat betaAngle;
/// Gamma angle of the tangible.
@property (nonatomic) CGFloat gammaAngle;
/// Trace that represents the current position A of the tangible.
@property (nonatomic, strong) MTKTrace * _Nullable currentA;
/// Trace that represents the current position B of the tangible.
@property (nonatomic, strong) MTKTrace * _Nullable currentB;
/// Trace that represents the current position C of the tangible.
@property (nonatomic, strong) MTKTrace * _Nullable currentC;
/// Returns all associated and active traces of the tangible.
@property (nonatomic, copy) NSSet<MTKTrace *> * _Nonnull usedTraces;
/// Side vector a of the tangible.
@property (nonatomic) CGFloat aVectorLength;
/// Side vector b of the tangible.
@property (nonatomic) CGFloat bVectorLength;
/// Side vector c of the tangible.
@property (nonatomic) CGFloat cVectorLength;
/// Position x of the tangible area.
@property (nonatomic, strong) NSNumber * _Nullable xPos;
/// Position y of the tangible area.
@property (nonatomic, strong) NSNumber * _Nullable yPos;
/// Width of the tangible area.
@property (nonatomic, strong) NSNumber * _Nullable width;
/// Height of the tangible area.
@property (nonatomic, strong) NSNumber * _Nullable height;
/// Define if the tangible should be rotatable.
@property (nonatomic) BOOL rotatable;
/// Displayed area of tangible.
@property (nonatomic, strong) SKShapeNode * _Nullable tangibleArea;
/// Determines the number of traces that are currently lost.
@property (nonatomic, readonly) NSInteger countOfLostTraces;
/// Returns if the trace set for A is currently lost.
@property (nonatomic, readonly) BOOL traceALost;
/// Returns if the trace set for B is currently lost.
@property (nonatomic, readonly) BOOL traceBLost;
/// Returns if the trace set for C is currently lost.
@property (nonatomic, readonly) BOOL traceCLost;
/// Returns if tangible is currently recognized (meaning has been associated to traces).
@property (nonatomic, readonly) BOOL isRecognized;
- (nonnull instancetype)initWithTangibleModel:(MTKPassiveTangibleModel * _Nonnull)tangibleModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithTraceSet:(NSSet<MTKTrace *> * _Nonnull)traceSet OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (SKShapeNode * _Nonnull)createPositionMarker SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class MTKActiveTangibleModel;

SWIFT_CLASS("_TtC18MultiTouchKitSwift17MTKActiveTangible")
@interface MTKActiveTangible : MTKPassiveTangible <MTKBluetoothNotifications>
/// Bluetooth ID of the tangible.
@property (nonatomic, copy) NSUUID * _Nonnull bluetoothID;
/// Bluetooth name of the tangible.
@property (nonatomic, copy) NSString * _Nullable bluetoothName;
/// Used to identify different observers in the MTKBluetoothManager.
@property (nonatomic, readonly, copy) NSString * _Nonnull observerName;
- (nonnull instancetype)initWithActiveTangibleModel:(MTKActiveTangibleModel * _Nonnull)activeTangibleModel OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithTraceSet:(NSSet<MTKTrace *> * _Nonnull)traceSet peripheralID:(NSUUID * _Nonnull)peripheralID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)startVibration;
- (void)stopVibration;
- (void)startBeep;
- (void)stopBeep;
- (void)setLEDColorWithColorString:(NSString * _Nonnull)colorString;
- (void)startSurfaceSensorSubscription;
- (void)surfaceSensorUpdateWithPeripheralName:(NSString * _Nonnull)peripheralName peripheralID:(NSUUID * _Nonnull)peripheralID value:(BOOL)value;
- (void)rotationSensorUpdateWithPeripheralName:(NSString * _Nonnull)peripheralName peripheralID:(NSUUID * _Nonnull)peripheralID xValue:(double)xValue yValue:(double)yValue zValue:(double)zValue;
- (void)connectedToPeripheralName:(NSString * _Nonnull)peripheralName peripheralID:(NSUUID * _Nonnull)peripheralID;
- (void)disconnectedFromPeripheralName:(NSString * _Nonnull)peripheralName peripheralID:(NSUUID * _Nonnull)peripheralID;
- (nonnull instancetype)initWithTangibleModel:(MTKPassiveTangibleModel * _Nonnull)tangibleModel SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithTraceSet:(NSSet<MTKTrace *> * _Nonnull)traceSet SWIFT_UNAVAILABLE;
@end


/// Model class representing a passive tangible, which can read/write all its individual characteristics using a dictionary
SWIFT_CLASS("_TtC18MultiTouchKitSwift23MTKPassiveTangibleModel")
@interface MTKPassiveTangibleModel : NSObject
/// Identifier of the tangible
@property (nonatomic, copy) NSString * _Nonnull identifier;
/// Alpha angle of the tangible
@property (nonatomic) CGFloat alphaAngle;
/// Beta angle of the tangible
@property (nonatomic) CGFloat betaAngle;
/// Gamma angle of the tangible
@property (nonatomic) CGFloat gammaAngle;
/// Side vector a of the tangible
@property (nonatomic) CGFloat aVectorLength;
/// Side vector b of the tangible
@property (nonatomic) CGFloat bVectorLength;
/// Side vector c of the tangible
@property (nonatomic) CGFloat cVectorLength;
/// Name of the tangible
@property (nonatomic, copy) NSString * _Nullable tName;
/// Position x of the tangible area
@property (nonatomic, strong) NSNumber * _Nullable xPos;
/// Position y of the tangible area
@property (nonatomic, strong) NSNumber * _Nullable yPos;
/// Width of the tangible area
@property (nonatomic, strong) NSNumber * _Nullable width;
/// Height of the tangible area
@property (nonatomic, strong) NSNumber * _Nullable height;
/// Initializes a tangible model from a dictionary
/// \param dict Dictionary containing all relevant information
///
///
/// returns:
/// Initialized model, nil if dict is invalid
- (nullable instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
/// Initializes a tangible model from an initialized tangible
/// \param tangible Tangible used to receive all required information
///
///
/// returns:
/// Initialzed model, based on the information in the tangible
- (nonnull instancetype)initWithTangible:(MTKPassiveTangible * _Nonnull)tangible OBJC_DESIGNATED_INITIALIZER;
/// Creates a dictionary containing all information the tangible model currently has set
///
/// returns:
/// Dictionary containing all information of the tangible model
- (NSDictionary<NSString *, id> * _Nonnull)dictionaryRepresentation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Model class representing an active tangible, which can read/write all its individual characteristics using a dictionary
SWIFT_CLASS("_TtC18MultiTouchKitSwift22MTKActiveTangibleModel")
@interface MTKActiveTangibleModel : MTKPassiveTangibleModel
/// Bluetooth ID of the tangible
@property (nonatomic, copy) NSUUID * _Nonnull bluetoothID;
/// Bluetooth name of the tangible
@property (nonatomic, copy) NSString * _Nullable bluetoothName;
/// Initializes a tangible model from a dictionary
/// \param dict Dictionary containing all relevant information
///
///
/// returns:
/// Initialized model, nil if dict is not valid
- (nullable instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
/// Initializes a tangible model from an initialized tangible
/// \param tangible Tangible used to receive all required information
///
///
/// returns:
/// Initialzed model, based on the information in the tangible
- (nonnull instancetype)initWithActiveTangible:(MTKActiveTangible * _Nonnull)activeTangible OBJC_DESIGNATED_INITIALIZER;
/// Creates a dictionary containing all information the tangible model currently has set
///
/// returns:
/// Dictionary containing all information of the tangible model
- (NSDictionary<NSString *, id> * _Nonnull)dictionaryRepresentation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithTangible:(MTKPassiveTangible * _Nonnull)tangible SWIFT_UNAVAILABLE;
@end


/// Model class representing an app, which can read/write all its individual characteristics using a dictionary
SWIFT_CLASS("_TtC18MultiTouchKitSwift11MTKAppModel")
@interface MTKAppModel : NSObject
/// Name of the application
@property (nonatomic, copy) NSString * _Nonnull appName;
/// Mapping of tangibles to scenes, defines which tangibles are added to which scenes
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull sceneTangibles;
/// The name of the used profile for the application
@property (nonatomic, copy) NSString * _Nullable usedProfile;
/// Names of all scenes that exist in the application
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull existingScenes;
/// Names of all scenes loaded by the application
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull scenesToBeLoaded;
/// The scene that is loaded at the start of the application
@property (nonatomic, copy) NSString * _Nullable startScene;
/// Initializes an app model based on the given dictionary
/// \param dict Dictionary containing all information fpr the initialization
///
///
/// returns:
/// Initialized app model (if dict is valid), based on the information saved in the dictionary
- (nullable instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
/// Initializes an empty app model
///
/// returns:
/// Empty app model
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a dictionary representation of the app model
///
/// returns:
/// Dictionary containing all information of the app model
- (NSDictionary<NSString *, id> * _Nonnull)dictionaryRepresentation SWIFT_WARN_UNUSED_RESULT;
@end

@class MTKBluetoothPeripheral;
@class CBCentralManager;
@class CBPeripheral;
@class CBService;
@class CBCharacteristic;

SWIFT_CLASS("_TtC18MultiTouchKitSwift19MTKBluetoothManager")
@interface MTKBluetoothManager : NSObject <CBCentralManagerDelegate, CBPeripheralDelegate>
/// The one-line singleton. https://krakendev.io/blog/the-right-way-to-write-a-singleton
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MTKBluetoothManager * _Nonnull sharedBluetoothManager;)
+ (MTKBluetoothManager * _Nonnull)sharedBluetoothManager SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)addWithObserver:(id <MTKBluetoothNotifications> _Nonnull)observer peripheralID:(NSUUID * _Nonnull)peripheralID;
- (void)addWithObserver:(id <MTKBluetoothNotifications> _Nonnull)observer;
- (void)removeWithObserver:(id <MTKBluetoothNotifications> _Nonnull)observer peripheralID:(NSUUID * _Nonnull)peripheralID;
- (BOOL)isPeripheralConnectedWithPeripheralID:(NSUUID * _Nonnull)peripheralID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPeripheralDiscoveredWithPeripheralID:(NSUUID * _Nonnull)peripheralID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)lastSurfaceSensorValueOfPeripheralID:(NSUUID * _Nonnull)peripheralID SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPeripheralNameWithPeripheralID:(NSUUID * _Nonnull)peripheralID SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSUUID *> * _Nonnull)getDiscoveredPeripheralIDs SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSUUID *> * _Nonnull)getPeripheralIDsWithPeripheralName:(NSString * _Nonnull)peripheralName SWIFT_WARN_UNUSED_RESULT;
- (MTKBluetoothPeripheral * _Nullable)getPeripheralWithPeripheralID:(NSUUID * _Nonnull)peripheralID SWIFT_WARN_UNUSED_RESULT;
- (void)startVibratingWithTangible:(MTKActiveTangible * _Nonnull)tangible;
- (void)stopVibratingWithTangible:(MTKActiveTangible * _Nonnull)tangible;
- (void)startBeepWithTangible:(MTKActiveTangible * _Nonnull)tangible;
- (void)stopBeepWithTangible:(MTKActiveTangible * _Nonnull)tangible;
- (void)setLEDColorWithTangible:(MTKActiveTangible * _Nonnull)tangible colorString:(NSString * _Nonnull)colorString;
- (void)subscribeToSurfaceWithTangible:(MTKActiveTangible * _Nonnull)tangible;
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end



SWIFT_CLASS("_TtC18MultiTouchKitSwift22MTKBluetoothPeripheral")
@interface MTKBluetoothPeripheral : NSObject
@property (nonatomic, copy) NSUUID * _Null_unspecified identifier;
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, strong) CBPeripheral * _Null_unspecified peripheral;
- (nonnull instancetype)initWithPeripheral:(CBPeripheral * _Nonnull)peripheral OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Protocol to implement of instance that wants to be the delegate for any node (e.g. MTKScene).
SWIFT_PROTOCOL("_TtP18MultiTouchKitSwift22MTKNodeTraceProcessing_")
@protocol MTKNodeTraceProcessing
@optional
- (NSSet<MTKTrace *> * _Nonnull)preProcessTraceSetWithTraceSet:(NSSet<MTKTrace *> * _Nonnull)traceSet node:(SKNode * _Nonnull)node timestamp:(NSTimeInterval)timestamp SWIFT_WARN_UNUSED_RESULT;
- (NSSet<MTKTrace *> * _Nonnull)postProcessTraceSetWithTraceSet:(NSSet<MTKTrace *> * _Nonnull)traceSet node:(SKNode * _Nonnull)node timestamp:(NSTimeInterval)timestamp SWIFT_WARN_UNUSED_RESULT;
@end

@protocol MTKButtonDelegate;
@class SKLabelNode;
@class NSColor;

SWIFT_CLASS("_TtC18MultiTouchKitSwift9MTKButton")
@interface MTKButton : SKNode <MTKNodeTraceProcessing>
@property (nonatomic, strong) id <MTKButtonDelegate> _Nullable delegate;
@property (nonatomic, strong) SKLabelNode * _Nullable titleLabel;
- (nonnull instancetype)initWithSize:(CGSize)size label:(NSString * _Nonnull)label OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSize:(CGSize)size image:(NSString * _Nonnull)image OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)addWithTarget:(id _Nonnull)target action:(SEL _Nonnull)action;
- (void)setWithColor:(NSColor * _Nonnull)color;
- (void)setWithSize:(CGSize)size image:(NSString * _Nonnull)image;
- (NSSet<MTKTrace *> * _Nonnull)preProcessTraceSetWithTraceSet:(NSSet<MTKTrace *> * _Nonnull)traceSet node:(SKNode * _Nonnull)node timestamp:(NSTimeInterval)timestamp SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP18MultiTouchKitSwift17MTKButtonDelegate_")
@protocol MTKButtonDelegate
@optional
- (void)buttonPressedWithTrace:(MTKTrace * _Nonnull)trace button:(MTKButton * _Nonnull)button;
@end

@class MTKConfigFile;
@class NSWindow;
@class MTKViewModel;

/// The config controller is responsible for loading all configurations.
/// In general the file is read on startup of the application and not changed until it requests a change.
/// Any changes in the file while the application runs have no effect to the application if not reloading the config explicitly.
/// Applications should in general not change the config. The changes should be done with the TCC to ensure the file structure.
/// To avoid any read and write issues the controller uses the Singleton pattern.
SWIFT_CLASS("_TtC18MultiTouchKitSwift19MTKConfigController")
@interface MTKConfigController : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MTKConfigController * _Nonnull sharedController;)
+ (MTKConfigController * _Nonnull)sharedController SWIFT_WARN_UNUSED_RESULT;
/// All profiles loaded from file by the configcontroller
@property (nonatomic, copy) NSArray<MTKConfigFile *> * _Nonnull profiles;
/// Profile that is currently active and in use by the application
@property (nonatomic, strong) MTKConfigFile * _Nonnull currentProfile;
/// All loaded application configs
@property (nonatomic, copy) NSArray<MTKAppModel *> * _Nonnull apps;
/// The currently active application config
@property (nonatomic, strong) MTKAppModel * _Nonnull currentApp;
/// All loaded tangible configs
@property (nonatomic, copy) NSArray<MTKPassiveTangibleModel *> * _Nonnull tangibleModels;
/// The name of the scene that is used on startup
@property (nonatomic, copy) NSString * _Nullable startScene;
/// Initializes a new config controller
///
/// returns:
/// An initialized config controller
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Explicitly loads inputsources from file and adds the to the MTKTable.
/// Checks for type duplicates.
- (void)loadInputSources;
/// Explicitly loads, initializes and adds views to MTKTable
- (void)loadViews;
- (void)loadScenes;
/// Save the current config settings to file, the standard location and filename is used
- (void)exportCalibrationToFileWithNotification:(NSNotification * _Nonnull)notification;
- (MTKViewModel * _Nullable)viewModelForWindow:(NSWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (void)loadSceneWithSceneName:(NSString * _Nonnull)sceneName;
@end

@class MTKInputSourceModel;

/// The config profile holds all settings general for use at one workstation.
/// It is also the parent of all other settings. What means any find settings can be found in components of this class.
SWIFT_CLASS("_TtC18MultiTouchKitSwift13MTKConfigFile")
@interface MTKConfigFile : NSObject
/// Name of the profile
@property (nonatomic, copy) NSString * _Nonnull name;
/// Dictionary holding all related config information that are not directly in the MTKConfigProfile, examples are inputSources and views
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable configDict;
/// All view models related to this profile
@property (nonatomic, copy) NSArray<MTKViewModel *> * _Nonnull views;
/// All input source models related to this profile
@property (nonatomic, copy) NSArray<MTKInputSourceModel *> * _Nonnull inputSources;
/// The size of the created SKScene
@property (nonatomic) CGSize sceneSize;
/// The diameter of the shown cursor per touch (in milimeters)
@property (nonatomic) CGFloat cursorSize;
/// The color of the standard cursor
@property (nonatomic, strong) NSColor * _Nonnull cursorColor;
/// Initializes an empty model
///
/// returns:
/// Empty profile, only filled with basic standard values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes new profile from given dictionary
/// \param dict Dictionary representation of a config profile, has to provide a name at least
///
///
/// returns:
/// Initialized profile
- (nonnull instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
/// Transforms all settings in dictionary form
///
/// returns:
/// Dictionary containing all information
- (NSDictionary<NSString *, id> * _Nonnull)dictionaryRepresentation SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC18MultiTouchKitSwift14MTKInputSource")
@interface MTKInputSource : NSObject
@property (nonatomic, copy) NSString * _Nullable name;
- (void)start;
- (void)stop;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Model class representing an input source, which can read/write all its individual characteristics using a dictionary
SWIFT_CLASS("_TtC18MultiTouchKitSwift19MTKInputSourceModel")
@interface MTKInputSourceModel : NSObject
/// Name of the input source, used to display to the user in for example the TCC
@property (nonatomic, copy) NSString * _Nonnull name;
/// Defines if the input source is active or not, active sources will provide input data
@property (nonatomic) BOOL isActive;
/// This dictionary contains additional information, which may differ for each of the input sources
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable infos;
/// Initializes input source model using the information saved in the given dictionary
/// \param dict Dictionary containing information related to the input source
///
///
/// returns:
/// An initialized input source model. May be mostly empty if no relevant information are provided in the dictionary
- (nullable instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
/// Creates a dictionary containing all the information of the input source
///
/// returns:
/// Dictionary containing all configs for the inputsource
- (NSDictionary<NSString *, id> * _Nonnull)dictionaryRepresentation SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18MultiTouchKitSwift19MTKMouseInputSource")
@interface MTKMouseInputSource : MTKInputSource
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)reset;
@end





SWIFT_CLASS("_TtC18MultiTouchKitSwift20MTKProgressIndicator")
@interface MTKProgressIndicator : SKNode
- (nonnull instancetype)initWithRect:(CGRect)rect primaryColor:(NSColor * _Nonnull)primaryColor secondaryColor:(NSColor * _Nonnull)secondaryColor OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setWithProgress:(NSInteger)progress;
- (NSInteger)getProgress SWIFT_WARN_UNUSED_RESULT;
- (void)incrementByValue:(NSInteger)value;
- (void)decrementByValue:(NSInteger)value;
- (void)reset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC18MultiTouchKitSwift8MTKScene")
@interface MTKScene : SKScene <MTKNodeTraceProcessing>
/// Map traces to nodes.
@property (nonatomic, copy) NSDictionary<NSNumber *, SKNode *> * _Nonnull traceToNodeMap;
/// Cursor which can be used to visualize each trace.
@property (nonatomic, strong) SKNode * _Null_unspecified standardCursor;
/// All tangibles in scene.
@property (nonatomic, readonly, copy) NSArray<MTKPassiveTangible *> * _Nonnull allTangibles;
/// All active tangibles in scene.
@property (nonatomic, readonly, copy) NSArray<MTKActiveTangible *> * _Nonnull activeTangibles;
/// All passive tangibles in scene.
@property (nonatomic, readonly, copy) NSArray<MTKPassiveTangible *> * _Nonnull passiveTangibles;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithSize:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Abstract. This functon is called ones to initialize the scene. Should be overwritten when creating a new scene. Set up all scene relevant things in here.
- (void)setupScene;
/// Abstract. Since the update function of the SKScene was ment to be overwritten by developers to make their own scene, we provide a new call that can be overwritten: updateScene.
/// \param currentTime The current timestamp, is determined just at the start of the loop.
///
- (void)updateSceneWithCurrentTime:(NSTimeInterval)currentTime;
- (void)update:(NSTimeInterval)currentTime;
/// Manually add tangible to scene.
/// \param tangible The tangible you want to add.
///
- (void)addWithTangible:(MTKPassiveTangible * _Nonnull)tangible;
/// Manually add tangible models to scene.
/// \param models The tangible models you want to add.
///
- (void)addTangibleModelsWithModels:(NSArray<MTKPassiveTangibleModel *> * _Nonnull)models;
@end


/// Describes one touch. It is the generalisation class, all different type of touches reaching our framework are transferred to this class.
SWIFT_CLASS("_TtC18MultiTouchKitSwift8MTKTrace")
@interface MTKTrace : NSObject
/// Unique identifier of the trace.
@property (nonatomic, readonly) NSInteger uuid;
/// This is the touch that is the predecessor of this trace. This is determined by checking if a new touch appeared at nearly the same position the previous one has ended. This can be a tap or just a flickering in the recognition.
@property (nonatomic, strong) MTKTrace * _Nullable previousTrace;
/// The name of the associated devide the trace was created with.
@property (nonatomic, copy) NSString * _Nullable traceOriginName;
@property (nonatomic, readonly) BOOL isStationary;
/// When the trace is compressed, information access can be limited.
@property (nonatomic, readonly) BOOL isCompressed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSInteger hashValue;
- (NSArray<SKNode *> * _Nonnull)nodesInCurrentSceneAtTracePositionInHitOrder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTraceLost SWIFT_WARN_UNUSED_RESULT;
@end

@class NSEvent;

/// Class is used to transfer mouse events of the view to MTKInputSource of type mouse.
SWIFT_CLASS("_TtC18MultiTouchKitSwift7MTKView")
@interface MTKView : SKView
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)mouseDown:(NSEvent * _Nonnull)event;
- (void)mouseDragged:(NSEvent * _Nonnull)event;
- (void)mouseUp:(NSEvent * _Nonnull)event;
- (void)rightMouseDown:(NSEvent * _Nonnull)event;
@end

@class NSScreen;
@class NSView;

/// The view model holds all configs related to a shown window
SWIFT_CLASS("_TtC18MultiTouchKitSwift12MTKViewModel")
@interface MTKViewModel : NSObject
/// Name for the view
@property (nonatomic, copy) NSString * _Nonnull name;
/// Defines if the view is active and therefore loaded by the config controller
@property (nonatomic) BOOL isActive;
/// The position and size of the window on the screen
@property (nonatomic) CGRect windowRect;
/// The position and size of the area in the scene that is displayed in the window
@property (nonatomic) CGRect viewPortRect;
/// Defines the style of the window. This part is done by the MacOS. Mainly used to define if window decoration is wanted or not
@property (nonatomic) NSWindowStyleMask viewStyleMask;
/// Defines if the window should be a top level view. If so it will be shown above anything on the normal desktop
@property (nonatomic) BOOL isTopLevelView;
/// Name of the display
@property (nonatomic, copy) NSString * _Nonnull displayName;
/// Serial number of the display
@property (nonatomic, strong) NSNumber * _Nonnull displaySerialNumber;
/// Vendor id of the display
@property (nonatomic, strong) NSNumber * _Nonnull displayVendorNumber;
/// Model number of the display
@property (nonatomic, strong) NSNumber * _Nonnull displayModelNumber;
/// The screen on which the window is supposed to be shown, can be nil if not connected
@property (nonatomic, strong) NSScreen * _Nullable screen;
/// After loading the model this is the pointer to the view created from this model
@property (nonatomic, strong) NSView * _Nullable view;
/// After loading the model this is the pointer to the window created from this model
@property (nonatomic, strong) NSWindow * _Nullable window;
/// Initializes the model based on the given dictionary
/// \param dict Dictionary containing all relevant information for the view model
///
///
/// returns:
/// Initialized view model or nil if dictionary does not match requirements
- (nullable instancetype)initWithDict:(NSDictionary<NSString *, id> * _Nonnull)dict OBJC_DESIGNATED_INITIALIZER;
/// Initializes the model based on the given screen, windowRect and viewPortRect
/// \param screen A screen
///
/// \param window Size and position for the window
///
/// \param viewPort Position and size of the viewed part of the scene
///
///
/// returns:
/// Initialized view model
- (nonnull instancetype)initWithScreen:(NSScreen * _Nonnull)screen window:(CGRect)window viewPort:(CGRect)viewPort OBJC_DESIGNATED_INITIALIZER;
/// Creates a dictionary representing this model
///
/// returns:
/// Dictionary containing all information of the model
- (NSDictionary<NSString *, id> * _Nonnull)dictionaryRepresentation SWIFT_WARN_UNUSED_RESULT;
- (void)changeToScreenWithName:(NSString * _Nonnull)name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface SKNode (SWIFT_EXTENSION(MultiTouchKitSwift))
/// All traces bound to the node.
@property (nonatomic, copy) NSSet<MTKTrace *> * _Nonnull boundedTraceSet;
/// Delegate of the node.
@property (nonatomic, strong) id <MTKNodeTraceProcessing> _Nullable traceDelegate;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
